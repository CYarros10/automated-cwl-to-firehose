AWSTemplateFormatVersion: 2010-09-09
Description: ---

Parameters:

  pBucketName:
    Type: String
    Description: name of the destination bucket for your cloudwatch log groups

  pSubFilterName:
    Type: String
    Description: name of the filter for your cloudwatch log group

  pTagKey:
    Type: String
    Default: 'captured'
    Description: the tag key that identifies which cloudwatch log groups to route to firehose delivery stream

  pTagValue:
    Type: String
    Default: 'true'
    Description: the tag value that identifies which cloudwatch log groups to route to firehose delivery stream

Resources:

# --------------------------------------------------
# Resources: IAM Policy
# --------------------------------------------------

  rCWLtoFirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /

  rCWLtoFirehosePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: PermissionPolicyForCWLtoFirehose
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'firehose:*'
            Resource: !GetAtt rFirehoseDeliveryStream.Arn
          - Effect: Allow
            Action: 'iam:PassRole'
            Resource: !GetAtt rCWLtoFirehoseRole.Arn
      Roles:
        - !Ref rCWLtoFirehoseRole


# --------------------------------------------------
# Resources: S3 Bucket
# --------------------------------------------------

  rS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref pBucketName

# --------------------------------------------------
# Resources: Kinesis
# --------------------------------------------------

  rFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: cloudwatch-tagged-log-groups
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt rKinesisDeliveryRole.Arn
        BucketARN: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref pBucketName
        BufferingHints:
          SizeInMBs: 128
          IntervalInSeconds: 90
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          NoEncryptionConfig: NoEncryption
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Join
            - ''
            - - 'KDF-'
              - 'cloudwatch-tagged-log-groups'
          LogStreamName: S3Delivery
        S3BackupMode: Disabled

  rKinesisDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
      Path: "/"
      Policies:
        - PolicyName: firehose_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref pBucketName
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref pBucketName
                      - '*'
              - Effect: Allow
                Action: 'logs:PutLogEvents'
                Resource: '*'


# --------------------------------------------------
# Resources: Lambda
# --------------------------------------------------
  rLambdaCWLRoutingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaCWLRoutingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:*'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource: !GetAtt rCWLtoFirehoseRole.Arn

  rLambdaCWLRouting:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
            import json
            import boto3
            import os

            # initiate boto3 logs client
            session = boto3.session.Session()
            logs_client = session.client('logs')

            # retrieve environment variables
            sub_filter_pattern=""
            sub_filter_name= str(os.getenv('SUB_FILTER_NAME'))
            firehose_destination_arn = str(os.getenv('SUB_FIREHOSE_DEST_ARN'))
            cloudwatch_to_firehose_role_arn = str(os.getenv('SUB_ROLE_ARN'))
            tag_key = str(os.getenv('TAG_KEY'))
            tag_value = str(os.getenv('TAG_VALUE'))

            def lambda_handler(event, context):

                print("Beginning Lambda Execution...")

                resource_type = get_resource_type(event)

                # check to see if event resource type is log-group
                if(get_resource_type(event) == 'log-group'):

                    # get log group name
                    log_group_name = get_log_group_name(event)

                    # retrieve log group tags
                    tags = get_log_group_tags(event)

                    # check to see if there is a tag match
                    if (tag_key in tags.keys()):

                        tag_value_found = str(tags[tag_key]).lower()

                        # tag match found. determine if key value is correct
                        if (tag_value_found == tag_value):
                            try:
                                # put subscription filter on the log group. (route logging to a kinesis delivery stream)
                                response_put_subscription_filter = logs_client.put_subscription_filter(
                                    logGroupName=log_group_name,
                                    filterName=sub_filter_name,
                                    filterPattern=sub_filter_pattern,
                                    destinationArn=firehose_destination_arn,
                                    roleArn=cloudwatch_to_firehose_role_arn,
                                    distribution='Random'
                                )

                                # check to see if subscription filter successfully added and destination is correct
                                if (get_log_group_subscription(log_group_name, sub_filter_name)['subscriptionFilters'][0]['destinationArn'] == firehose_destination_arn):
                                    print("success. cloudwatch log group [" + log_group_name + "] is routed to firehose destination: "+firehose_destination_arn)
                            except Exception as e:
                                print(str(e))

                        # if tag is not true, we want to remove the subscription filter
                        else:
                            if (len(get_log_group_subscription(log_group_name, sub_filter_name)['subscriptionFilters']) != 0):
                                try:
                                    response_delete_subscription_filter = logs_client.delete_subscription_filter(
                                        logGroupName=log_group_name,
                                        filterName=sub_filter_name
                                    )
                                    print("success. cloudwatch log group [" + log_group_name + "] is no longer routed to firehose destination: "+firehose_destination_arn)
                                except Exception as e:
                                    print(str(e))
                            else:
                                print("cloudwatch log group [" + log_group_name + "] has no subscription filter / destination.")
                    else:
                        print("failed. tag key not found.")
                else:
                    print("failed. resource-type was not log-group.")

                print("Ending Lambda Execution...")

            def get_resource_type(event):
                raw_cloudwatch_msg = event
                resource_type = raw_cloudwatch_msg['detail']['resource-type']
                return resource_type

            def get_log_group_name(event):
                raw_cloudwatch_msg = event
                log_group_arn = raw_cloudwatch_msg['resources'][0]
                log_group_name = log_group_arn.split("log-group:",1)[1]
                return log_group_name

            def get_log_group_tags(event):
                raw_cloudwatch_msg = event
                log_group_tags = raw_cloudwatch_msg['detail']['tags']
                return log_group_tags

            def get_log_group_subscription(log_group_name, sub_filter_name):
                response_describe_subscription_filters = logs_client.describe_subscription_filters(
                    logGroupName=log_group_name,
                    filterNamePrefix=sub_filter_name,
                    limit=1
                )
                return response_describe_subscription_filters
      Timeout: 30
      MemorySize : 128
      Description: route cloudwatch log groups to a kinesis firehose based on tags
      FunctionName: cwl-routing
      Handler: index.lambda_handler
      Role: !GetAtt rLambdaCWLRoutingRole.Arn
      Runtime: python3.7
      Environment:
        Variables:
          SUB_FILTER_NAME: !Ref pSubFilterName
          SUB_FIREHOSE_DEST_ARN: !GetAtt rFirehoseDeliveryStream.Arn
          SUB_ROLE_ARN: !GetAtt rCWLtoFirehoseRole.Arn
          TAG_KEY: !Ref pTagKey
          TAG_VALUE: !Ref pTagValue

# --------------------------------------------------
# Resources: Cloudwatch Events Rule
# --------------------------------------------------

  rEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule - Tag Change on Resource"
      EventPattern:
        source:
          - "aws.tag"
        detail-type:
          - "Tag Change on Resource"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt rLambdaCWLRouting.Arn
          Id: 'test'


  rPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rLambdaCWLRouting
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt rEventRule.Arn