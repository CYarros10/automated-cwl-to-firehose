---
AWSTemplateFormatVersion: 2010-09-09
Description: Automatically route CloudWatch logs to Kinesis Firehose by adding tags.

Parameters:

  pBucketName:
    Type: String
    Description: name of the destination bucket for your cloudwatch log groups

  pBucketNameCodeArtifacts:
    Type: String
    Description: bucket containing the lambda code / zip artifact

  pSubFilterName:
    Type: String
    Description: name of the filter for your cloudwatch log group

  pTagKey:
    Type: String
    Default: 'captured'
    Description: the tag key that identifies which cloudwatch log groups to route to firehose delivery stream

  pTagValue:
    Type: String
    Default: 'true'
    Description: the tag value that identifies which cloudwatch log groups to route to firehose delivery stream

Resources:

  # --------------------------------------------------
  # Resources: IAM Policy
  # --------------------------------------------------

  rCWLtoFirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /

  rCWLtoFirehosePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: PermissionPolicyForCWLtoFirehose
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
              - 'firehose:UpdateDestination'
              - 'firehose:DescribeDeliveryStream'
            Resource: !GetAtt rFirehoseDeliveryStream.Arn
          - Effect: Allow
            Action: 'iam:PassRole'
            Resource: !GetAtt rCWLtoFirehoseRole.Arn
      Roles:
        - !Ref rCWLtoFirehoseRole


  # --------------------------------------------------
  # Resources: S3 Bucket
  # --------------------------------------------------

  rS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref pBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          -
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
            NoncurrentVersionExpirationInDays: 3
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled


  # --------------------------------------------------
  # Resources: Kinesis
  # --------------------------------------------------

  rFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: cloudwatch-tagged-log-groups
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt rKinesisDeliveryRole.Arn
        BucketARN: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref pBucketName
        BufferingHints:
          SizeInMBs: 128
          IntervalInSeconds: 90
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          NoEncryptionConfig: NoEncryption
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Join
            - ''
            - - 'KDF-'
              - 'cloudwatch-tagged-log-groups'
          LogStreamName: S3Delivery
        S3BackupMode: Disabled

  rKinesisDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
      Path: "/"
      Policies:
        - PolicyName: firehose_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref pBucketName
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref pBucketName
                      - '*'
              - Effect: Allow
                Action: 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'


  # --------------------------------------------------
  # Resources: Lambda
  # --------------------------------------------------

  rLambdaCWLRoutingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaCWLRoutingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                  - 'logs:putSubscriptionFilter'
                  - 'logs:deleteSubscriptionFilter'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: !GetAtt rCWLtoFirehoseRole.Arn

  rLambdaCWLRouting:
    Type: AWS::Lambda::Function
    Properties:
      CodeUri:
        Bucket: !Ref pBucketNameCodeArtifacts
        Key: cwl-routing.zip
      Timeout: 30
      MemorySize: 128
      Description: route cloudwatch log groups to a kinesis firehose based on tags
      FunctionName: cwl-routing
      Handler: cwl-routing.lambda_handler
      Role: !GetAtt rLambdaCWLRoutingRole.Arn
      Runtime: python3.7
      Environment:
        Variables:
          SUB_FILTER_NAME: !Ref pSubFilterName
          SUB_FIREHOSE_DEST_ARN: !GetAtt rFirehoseDeliveryStream.Arn
          SUB_ROLE_ARN: !GetAtt rCWLtoFirehoseRole.Arn
          TAG_KEY: !Ref pTagKey
          TAG_VALUE: !Ref pTagValue

  # --------------------------------------------------
  # Resources: Cloudwatch Events Rule
  # --------------------------------------------------

  rEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule - Tag Change on Resource"
      EventPattern:
        source:
          - "aws.tag"
        detail-type:
          - "Tag Change on Resource"
        detail:
          resource-type:
            - "log-group"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt rLambdaCWLRouting.Arn
          Id: 'test_id'


  rPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rLambdaCWLRouting
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt rEventRule.Arn
